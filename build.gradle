import org.gradle.api.tasks.wrapper.Wrapper

/*
 * user guide available at https://docs.gradle.org/4.3.1/userguide/tutorial_java_projects.html
 */
apply plugin: 'java'

defaultTasks 'clean', 'compile'

sourceSets {
    test.java.srcDir "src/test"
}

repositories {
    mavenCentral()
}

configurations {
    cucumberRuntime {
        extendsFrom testCompile
        extendsFrom testRuntime
    }
}

dependencies {
    compile 'com.codeborne:selenide:4.8'
    compile 'org.junit:junit5-engine:5.0.0-ALPHA'
    compile 'org.apache.commons:commons-pool2:2.4.3'
    compile 'org.apache.maven.plugins:maven-surefire-report-plugin:2.20.1'
    compile 'info.cukes:cucumber-java:1.2.5'
    compile 'info.cukes:cucumber-junit:1.2.5'
    testCompile fileTree(dir: 'libs', include: '*.jar')

}
/*
test {
    dependsOn assemble, compileTestJava
    testLogging.showStandardStreams = true
    systemProperties System.getProperties()
}*/

test {
    testLogging.showStandardStreams = true
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.4.1'
    jarFile = './gradle/wrapper/gradle-wrapper.jar'
    scriptFile = './gradle'
}

/*test {
    // set a system property for the test JVM(s)
    //systemProperty 'some.prop', 'value'

    // show standard out and standard error of the test JVM(s) on the console
    testLogging.showStandardStreams = true

    // set JVM arguments for the test JVM(s)
    jvmArgs '-XX:MaxPermSize=256m'

    // listen to events in the test execution lifecycle
    beforeTest { descriptor ->
        logger.lifecycle("Running test: " + descriptor)
    }

    // listen to standard out and standard error of the test JVM(s)
    onOutput { descriptor, event ->
        logger.lifecycle("Test: " + descriptor + " produced standard out/err: " + event.message)
    }
}*/

/*task testCucumber(type: JavaExec, dependsOn: [testClasses]) {
    description = 'Runs all feature files with Cucumber'
    ext.outputDir = file("$buildDir/target/reports")

    classpath = sourceSets.test.runtimeClasspath
    main = 'cucumber.api.cli.Main'
    args '--format', 'pretty',
            '--format', 'html:target/cucumber',
            '--glue', 'foo.bar.fum.cucumber',   // foo.bar.fum.cucumber is the package for Steps, Hooks etc.
            '--strict',
            sourceSets.test.output.resourcesDir // Find feature files stored in src/test/resources
}*/

/*task cucumber {
    // dependsOn assemble compileTestJava
    doLast {
        javaexec {
            main = "cucumber.api.cli.Main"
            classpath = configurations.cucumberRuntime
            //environment(-DCucumber.Options="--name=MyFeature"' )
            args = ['--plugin', 'pretty', '--glue', 'src/main/java/steps', 'src/test/java/features']

        }
    }
}*/

/*
task executeFeatures(type: Test) {
    // enable TestNG support (default is JUnit)
    //useTestNG()
    options {
        //useDefaultListeners = false
        listeners << ''
        jvmArgs = ['-Dcucumber.options= ' +
                           '--glue org.company.app ' +
                           '--plugin pretty ' +
                           '--plugin json:build/cucumber/cucumber.json ' +
                           '--plugin rerun:build/cucumber/rerun.txt ' +
                           //splitFeatureFolders(featureFolders) + ' ' +
                           cucumberOptions]
    }

    // show standard out and standard error of the test JVM(s) on the console
    testLogging.showStandardStreams = true

    // set JVM arguments for the test JVM(s)
    scanForTestClasses = false
    // ignoreFailures = true

    //turn off Gradle's HTML report to avoid replacing the reports generated by TestNG library:
    reports.html.enabled = false

    doLast {
        generateReport('build/cucumber/cucumber.json', 'build/cucumber/reports')
    }
}*/
